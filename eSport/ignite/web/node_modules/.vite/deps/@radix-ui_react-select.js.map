{
  "version": 3,
  "sources": ["../../@radix-ui/number/dist/packages/core/number/src/index.ts", "../../@radix-ui/number/dist/packages/core/number/src/number.ts", "../../@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/index.ts", "../../@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/VisuallyHidden.tsx", "../../@radix-ui/react-select/dist/packages/react/select/src/index.ts", "../../@radix-ui/react-select/dist/packages/react/select/src/Select.tsx"],
  "sourcesContent": ["export { clamp } from './number';\n", "function clamp(value: number, [min, max]: [number, number]): number {\n  return Math.min(max, Math.max(min, value));\n}\n\nexport { clamp };\n", "export {\n  VisuallyHidden,\n  //\n  Root,\n} from './VisuallyHidden';\nexport type { VisuallyHiddenProps } from './VisuallyHidden';\n", "import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * VisuallyHidden\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'VisuallyHidden';\n\ntype VisuallyHiddenElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface VisuallyHiddenProps extends PrimitiveSpanProps {}\n\nconst VisuallyHidden = React.forwardRef<VisuallyHiddenElement, VisuallyHiddenProps>(\n  (props, forwardedRef) => {\n    return (\n      <Primitive.span\n        {...props}\n        ref={forwardedRef}\n        style={{\n          // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss\n          position: 'absolute',\n          border: 0,\n          width: 1,\n          height: 1,\n          padding: 0,\n          margin: -1,\n          overflow: 'hidden',\n          clip: 'rect(0, 0, 0, 0)',\n          whiteSpace: 'nowrap',\n          wordWrap: 'normal',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nVisuallyHidden.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = VisuallyHidden;\n\nexport {\n  VisuallyHidden,\n  //\n  Root,\n};\nexport type { VisuallyHiddenProps };\n", "export {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n} from './Select';\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n} from './Select';\n", "import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n]);\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value?: string;\n  onValueChange(value: string): void;\n  open: boolean;\n  required?: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n  disabled?: boolean;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ntype NativeOption = React.ReactElement<React.ComponentProps<'option'>>;\n\ntype SelectNativeOptionsContextValue = {\n  onNativeOptionAdd(option: NativeOption): void;\n  onNativeOptionRemove(option: NativeOption): void;\n};\nconst [SelectNativeOptionsProvider, useSelectNativeOptionsContext] =\n  createSelectContext<SelectNativeOptionsContextValue>(SELECT_NAME);\n\ninterface SelectProps {\n  children?: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n  } = props;\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? Boolean(trigger.closest('form')) : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(new Set<NativeOption>());\n\n  // The native `select` only associates the correct default value if the corresponding\n  // `option` is rendered as a child **at the same time** as itself.\n  // Because it might take a few renders for our items to gather the information to build\n  // the native `option`(s), we generate a key on the `select` to make sure React re-builds it\n  // each time the options change.\n  const nativeSelectKey = Array.from(nativeOptionsSet)\n    .map((option) => option.props.value)\n    .join(';');\n\n  return (\n    <SelectProvider\n      required={required}\n      scope={__scopeSelect}\n      trigger={trigger}\n      onTriggerChange={setTrigger}\n      valueNode={valueNode}\n      onValueNodeChange={setValueNode}\n      valueNodeHasChildren={valueNodeHasChildren}\n      onValueNodeHasChildrenChange={setValueNodeHasChildren}\n      contentId={useId()}\n      value={value}\n      onValueChange={setValue}\n      open={open}\n      onOpenChange={setOpen}\n      dir={direction}\n      triggerPointerDownPosRef={triggerPointerDownPosRef}\n      disabled={disabled}\n    >\n      <Collection.Provider scope={__scopeSelect}>\n        <SelectNativeOptionsProvider\n          scope={props.__scopeSelect}\n          onNativeOptionAdd={React.useCallback((option) => {\n            setNativeOptionsSet((prev) => new Set(prev).add(option));\n          }, [])}\n          onNativeOptionRemove={React.useCallback((option) => {\n            setNativeOptionsSet((prev) => {\n              const optionsSet = new Set(prev);\n              optionsSet.delete(option);\n              return optionsSet;\n            });\n          }, [])}\n        >\n          {children}\n        </SelectNativeOptionsProvider>\n      </Collection.Provider>\n\n      {isFormControl ? (\n        <BubbleSelect\n          key={nativeSelectKey}\n          aria-hidden\n          required={required}\n          tabIndex={-1}\n          name={name}\n          autoComplete={autoComplete}\n          value={value}\n          // enable form autofill\n          onChange={(event) => setValue(event.target.value)}\n          disabled={disabled}\n        >\n          {value === undefined ? <option value=\"\" /> : null}\n          {Array.from(nativeOptionsSet)}\n        </BubbleSelect>\n      ) : null}\n    </SelectProvider>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = () => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n    };\n\n    return (\n      <Primitive.button\n        type=\"button\"\n        role=\"combobox\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open}\n        aria-required={context.required}\n        aria-autocomplete=\"none\"\n        dir={context.dir}\n        data-state={context.open ? 'open' : 'closed'}\n        disabled={isDisabled}\n        data-disabled={isDisabled ? '' : undefined}\n        data-placeholder={context.value === undefined ? '' : undefined}\n        {...triggerProps}\n        ref={composedRefs}\n        // Enable compatibility with native label or custom `Label` \"click\" for Safari:\n        onClick={composeEventHandlers(triggerProps.onClick, (event) => {\n          // Whilst browsers generally have no issue focusing the trigger when clicking\n          // on a label, Safari seems to struggle with the fact that there's no `onClick`.\n          // We force `focus` in this case. Note: this doesn't create any other side-effect\n          // because we are preventing default in `onPointerDown` so effectively\n          // this only runs for a label \"click\"\n          event.currentTarget.focus();\n        })}\n        onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n          // prevent implicit pointer capture\n          // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n          (event.target as HTMLElement).releasePointerCapture(event.pointerId);\n\n          // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n          // but not when the control key is pressed (avoiding MacOS right click)\n          if (event.button === 0 && event.ctrlKey === false) {\n            handleOpen();\n            context.triggerPointerDownPosRef.current = {\n              x: Math.round(event.pageX),\n              y: Math.round(event.pageY),\n            };\n            // prevent trigger from stealing focus from the active item after opening.\n            event.preventDefault();\n          }\n        })}\n        onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n          const isTypingAhead = searchRef.current !== '';\n          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n          if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n          if (isTypingAhead && event.key === ' ') return;\n          if (OPEN_KEYS.includes(event.key)) {\n            handleOpen();\n            event.preventDefault();\n          }\n        })}\n      />\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, 'placeholder'> {\n  placeholder?: React.ReactNode;\n}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, children, placeholder, ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    useLayoutEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      >\n        {context.value === undefined && placeholder !== undefined ? placeholder : children}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '\u25BC'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'SelectPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface SelectPortalProps extends Omit<PortalProps, 'asChild'> {\n  children?: React.ReactNode;\n}\n\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\n  return <PortalPrimitive asChild {...props} />;\n};\n\nSelectPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    return (\n      <>\n        {context.open ? (\n          <SelectContentImpl {...props} ref={forwardedRef} />\n        ) : fragment ? (\n          ReactDOM.createPortal(\n            <SelectContentProvider scope={props.__scopeSelect}>\n              <Collection.Slot scope={props.__scopeSelect}>\n                <div>{props.children}</div>\n              </Collection.Slot>\n            </SelectContentProvider>,\n            fragment as any\n          )\n        ) : null}\n      </>\n    );\n  }\n);\n\nSelectContent.displayName = CONTENT_NAME;\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  contentWrapper?: HTMLDivElement | null;\n  content?: SelectContentElement | null;\n  viewport?: SelectViewportElement | null;\n  onViewportChange?: (node: SelectViewportElement | null) => void;\n  itemRefCallback?: (node: SelectItemElement | null, value: string, disabled: boolean) => void;\n  selectedItem?: SelectItemElement | null;\n  onItemLeave?: () => void;\n  itemTextRefCallback?: (\n    node: SelectItemTextElement | null,\n    value: string,\n    disabled: boolean\n  ) => void;\n  selectedItemText?: SelectItemTextElement | null;\n  onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\n  isPositioned?: boolean;\n  shouldExpandOnScrollRef?: React.RefObject<boolean>;\n  searchRef?: React.RefObject<string>;\n};\n\nconst [SelectContentProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\ntype SelectContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface SelectContentImplProps\n  extends Omit<\n    DismissableLayerProps,\n    'disableOutsidePointerEvents' | 'onFocusOutside' | 'onInteractOutside' | 'onDismiss'\n  > {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const { __scopeSelect, onCloseAutoFocus, ...contentProps } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const shouldRepositionRef = React.useRef(true);\n    const shouldExpandOnScrollRef = React.useRef(false);\n    const firstValidItemFoundRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    // Make sure the whole tree has focus guards as our `Select` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const [contentZIndex, setContentZIndex] = React.useState<string>();\n    useLayoutEffect(() => {\n      if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n    }, [content]);\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const position = React.useCallback(() => {\n      if (\n        context.trigger &&\n        context.valueNode &&\n        contentWrapper &&\n        content &&\n        viewport &&\n        selectedItem &&\n        selectedItemText\n      ) {\n        const triggerRect = context.trigger.getBoundingClientRect();\n\n        // -----------------------------------------------------------------------------------------\n        //  Horizontal positioning\n        // -----------------------------------------------------------------------------------------\n        const contentRect = content.getBoundingClientRect();\n        const valueNodeRect = context.valueNode.getBoundingClientRect();\n        const itemTextRect = selectedItemText.getBoundingClientRect();\n\n        if (context.dir !== 'rtl') {\n          const itemTextOffset = itemTextRect.left - contentRect.left;\n          const left = valueNodeRect.left - itemTextOffset;\n          const leftDelta = triggerRect.left - left;\n          const minContentWidth = triggerRect.width + leftDelta;\n          const contentWidth = Math.max(minContentWidth, contentRect.width);\n          const rightEdge = window.innerWidth - CONTENT_MARGIN;\n          const clampedLeft = clamp(left, [CONTENT_MARGIN, rightEdge - contentWidth]);\n\n          contentWrapper.style.minWidth = minContentWidth + 'px';\n          contentWrapper.style.left = clampedLeft + 'px';\n        } else {\n          const itemTextOffset = contentRect.right - itemTextRect.right;\n          const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n          const rightDelta = window.innerWidth - triggerRect.right - right;\n          const minContentWidth = triggerRect.width + rightDelta;\n          const contentWidth = Math.max(minContentWidth, contentRect.width);\n          const leftEdge = window.innerWidth - CONTENT_MARGIN;\n          const clampedRight = clamp(right, [CONTENT_MARGIN, leftEdge - contentWidth]);\n\n          contentWrapper.style.minWidth = minContentWidth + 'px';\n          contentWrapper.style.right = clampedRight + 'px';\n        }\n\n        // -----------------------------------------------------------------------------------------\n        // Vertical positioning\n        // -----------------------------------------------------------------------------------------\n        const items = getItems();\n        const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n        const itemsHeight = viewport.scrollHeight;\n\n        const contentStyles = window.getComputedStyle(content);\n        const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n        const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n        const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n        const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n        const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n\n        const viewportStyles = window.getComputedStyle(viewport);\n        const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n        const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n\n        const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n        const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n        const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n        const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n        const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n        const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n        const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n        if (willAlignWithoutTopOverflow) {\n          const isLastItem = selectedItem === items[items.length - 1].ref.current;\n          contentWrapper.style.bottom = 0 + 'px';\n          const viewportOffsetBottom =\n            content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n          const clampedTriggerMiddleToBottomEdge = Math.max(\n            triggerMiddleToBottomEdge,\n            selectedItemHalfHeight +\n              // viewport might have padding bottom, include it to avoid a scrollable viewport\n              (isLastItem ? viewportPaddingBottom : 0) +\n              viewportOffsetBottom +\n              contentBorderBottomWidth\n          );\n          const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n          contentWrapper.style.height = height + 'px';\n        } else {\n          const isFirstItem = selectedItem === items[0].ref.current;\n          contentWrapper.style.top = 0 + 'px';\n          const clampedTopEdgeToTriggerMiddle = Math.max(\n            topEdgeToTriggerMiddle,\n            contentBorderTopWidth +\n              viewport.offsetTop +\n              // viewport might have padding top, include it to avoid a scrollable viewport\n              (isFirstItem ? viewportPaddingTop : 0) +\n              selectedItemHalfHeight\n          );\n          const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n          contentWrapper.style.height = height + 'px';\n          viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n        }\n\n        contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n        contentWrapper.style.minHeight = minContentHeight + 'px';\n        contentWrapper.style.maxHeight = availableHeight + 'px';\n        // -----------------------------------------------------------------------------------------\n\n        setIsPositioned(true);\n\n        // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n        // so we explicitly turn it on only after they've registered.\n        requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n      }\n    }, [\n      getItems,\n      context.trigger,\n      context.valueNode,\n      contentWrapper,\n      content,\n      viewport,\n      selectedItem,\n      selectedItemText,\n      context.dir,\n    ]);\n\n    useLayoutEffect(() => position(), [position]);\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // When the viewport becomes scrollable at the top, the scroll up button will mount.\n    // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n    // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n    // We wait for this to happen and then re-run the positining logic one more time to account for it.\n    const handleScrollButtonChange = React.useCallback(\n      (node: SelectScrollButtonImplElement | null) => {\n        if (node && shouldRepositionRef.current === true) {\n          position();\n          focusSelectedItem();\n          shouldRepositionRef.current = false;\n        }\n      },\n      [position, focusSelectedItem]\n    );\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const itemRefCallback = React.useCallback(\n      (node: SelectItemElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n    const itemTextRefCallback = React.useCallback(\n      (node: SelectItemTextElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n\n    return (\n      <SelectContentProvider\n        scope={__scopeSelect}\n        contentWrapper={contentWrapper}\n        content={content}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        itemRefCallback={itemRefCallback}\n        selectedItem={selectedItem}\n        onItemLeave={handleItemLeave}\n        itemTextRefCallback={itemTextRefCallback}\n        selectedItemText={selectedItemText}\n        onScrollButtonChange={handleScrollButtonChange}\n        isPositioned={isPositioned}\n        shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n        searchRef={searchRef}\n      >\n        <RemoveScroll as={Slot} allowPinchZoom>\n          <div\n            ref={setContentWrapper}\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              position: 'fixed',\n              zIndex: contentZIndex,\n            }}\n          >\n            <FocusScope\n              asChild\n              // we make sure we're not trapping once it's been closed\n              // (closed !== unmounted when animating out)\n              trapped={context.open}\n              onMountAutoFocus={(event) => {\n                // we prevent open autofocus because we manually focus the selected item\n                event.preventDefault();\n              }}\n              onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n                context.trigger?.focus({ preventScroll: true });\n                event.preventDefault();\n              })}\n            >\n              <DismissableLayer\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                ref={composedRefs}\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // When we get the height of the content, it includes borders. If we were to set\n                  // the height without having `boxSizing: 'border-box'` it would be too big.\n                  boxSizing: 'border-box',\n                  maxHeight: '100%',\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                disableOutsidePointerEvents\n                // When focus is trapped, a focusout event may still happen.\n                // We make sure we don't trigger our `onDismiss` in such case.\n                onFocusOutside={(event) => event.preventDefault()}\n                onDismiss={() => context.onOpenChange(false)}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              />\n            </FocusScope>\n          </div>\n        </RemoveScroll>\n      </SelectContentProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              overflow: 'auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = contentContext;\n              if (shouldExpandOnScrollRef?.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  disabled: boolean;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) =>\n      contentContext.itemRefCallback?.(node, value, disabled)\n    );\n    const textId = useId();\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        disabled={disabled}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            data-highlighted={isFocused ? '' : undefined}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'checked' : 'unchecked'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, handleSelect)}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              if (disabled) {\n                contentContext.onItemLeave?.();\n              } else {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave?.();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef?.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\n    );\n\n    const textContent = itemTextNode?.textContent;\n    const nativeOption = React.useMemo(\n      () => (\n        <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\n          {textContent}\n        </option>\n      ),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, contentContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, contentContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave?.();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\n  (props, forwardedRef) => {\n    const { value, ...selectProps } = props;\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current!;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much\n     * as possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programatically and bubble to any parent form `onChange` event.\n     * Adding the `value` will cause React to consider the programatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use `VisuallyHidden` rather than `display: \"none\"` because Safari autofill\n     * won't work otherwise.\n     */\n    return (\n      <VisuallyHidden asChild>\n        <select {...selectProps} ref={composedRefs} defaultValue={value} />\n      </VisuallyHidden>\n    );\n  }\n);\n\nBubbleSelect.displayName = 'BubbleSelect';\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Portal = SelectPortal;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n};\n"],
  "mappings": "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",
  "names": ["clamp", "value", "min", "max", "Math", "NAME", "VisuallyHidden", "React", "props", "forwardedRef", "$kVwnw$createElement", "position", "border", "width", "height", "padding", "margin", "overflow", "clip", "whiteSpace", "wordWrap", "style", "OPEN_KEYS", "SELECTION_KEYS", "SELECT_NAME", "Collection", "useCollection", "createCollectionScope", "createCollection", "createSelectContext", "createSelectScope", "createContextScope", "SelectProvider", "useSelectContext", "SelectNativeOptionsProvider", "useSelectNativeOptionsContext", "Select", "props", "open", "openProp", "value", "valueProp", "required", "trigger", "setTrigger", "React", "valueNode", "setValueNode", "valueNodeHasChildren", "setValueNodeHasChildren", "direction", "useDirection", "dir", "setOpen", "useControllableState", "prop", "defaultProp", "defaultOpen", "onChange", "onOpenChange", "setValue", "defaultValue", "onValueChange", "triggerPointerDownPosRef", "isFormControl", "Boolean", "closest", "nativeOptionsSet", "setNativeOptionsSet", "Set", "nativeSelectKey", "Array", "from", "map", "option", "join", "$01b9c$createElement", "__scopeSelect", "useId", "prev", "add", "optionsSet", "delete", "children", "event", "target", "undefined", "TRIGGER_NAME", "SelectTrigger", "forwardedRef", "triggerProps", "context", "isDisabled", "disabled", "composedRefs", "useComposedRefs", "onTriggerChange", "getItems", "searchRef", "handleTypeaheadSearch", "resetTypeahead", "useTypeaheadSearch", "search", "enabledItems", "filter", "item", "currentItem", "find", "nextItem", "findNextItem", "handleOpen", "contentId", "composeEventHandlers", "onClick", "currentTarget", "focus", "onPointerDown", "releasePointerCapture", "pointerId", "button", "ctrlKey", "current", "x", "Math", "round", "pageX", "y", "pageY", "preventDefault", "onKeyDown", "isTypingAhead", "isModifierKey", "altKey", "metaKey", "key", "length", "includes", "VALUE_NAME", "SelectValue", "valueProps", "onValueNodeHasChildrenChange", "hasChildren", "onValueNodeChange", "useLayoutEffect", "pointerEvents", "placeholder", "ICON_NAME", "SelectIcon", "iconProps", "PORTAL_NAME", "SelectPortal", "CONTENT_NAME", "SelectContent", "fragment", "setFragment", "DocumentFragment", "$01b9c$Fragment", "ReactDOM", "CONTENT_MARGIN", "SelectContentProvider", "useSelectContentContext", "SelectContentImpl", "contentProps", "contentWrapper", "setContentWrapper", "content", "setContent", "viewport", "setViewport", "node", "selectedItem", "setSelectedItem", "selectedItemText", "setSelectedItemText", "isPositioned", "setIsPositioned", "shouldRepositionRef", "shouldExpandOnScrollRef", "firstValidItemFoundRef", "hideOthers", "useFocusGuards", "contentZIndex", "setContentZIndex", "window", "getComputedStyle", "zIndex", "focusFirst", "candidates", "firstItem", "restItems", "ref", "lastItem", "slice", "PREVIOUSLY_FOCUSED_ELEMENT", "document", "activeElement", "candidate", "scrollIntoView", "block", "scrollTop", "scrollHeight", "position", "triggerRect", "getBoundingClientRect", "contentRect", "valueNodeRect", "itemTextRect", "itemTextOffset", "left", "leftDelta", "minContentWidth", "width", "contentWidth", "max", "rightEdge", "innerWidth", "clampedLeft", "clamp", "style", "minWidth", "right", "rightDelta", "leftEdge", "clampedRight", "items", "availableHeight", "innerHeight", "itemsHeight", "contentStyles", "contentBorderTopWidth", "parseInt", "borderTopWidth", "contentPaddingTop", "paddingTop", "contentBorderBottomWidth", "borderBottomWidth", "contentPaddingBottom", "paddingBottom", "fullContentHeight", "minContentHeight", "min", "offsetHeight", "viewportStyles", "viewportPaddingTop", "viewportPaddingBottom", "topEdgeToTriggerMiddle", "top", "height", "triggerMiddleToBottomEdge", "selectedItemHalfHeight", "itemOffsetMiddle", "offsetTop", "contentTopToItemMiddle", "itemMiddleToContentBottom", "willAlignWithoutTopOverflow", "isLastItem", "bottom", "viewportOffsetBottom", "clientHeight", "clampedTriggerMiddleToBottomEdge", "isFirstItem", "clampedTopEdgeToTriggerMiddle", "margin", "minHeight", "maxHeight", "requestAnimationFrame", "focusSelectedItem", "handleScrollButtonChange", "pointerMoveDelta", "handlePointerMove", "abs", "handlePointerUp", "contains", "removeEventListener", "addEventListener", "capture", "once", "close", "setTimeout", "itemRefCallback", "isFirstValidItem", "isSelectedItem", "handleItemLeave", "itemTextRefCallback", "Slot", "display", "flexDirection", "onCloseAutoFocus", "preventScroll", "boxSizing", "outline", "candidateNodes", "reverse", "currentElement", "currentIndex", "indexOf", "VIEWPORT_NAME", "SelectViewport", "viewportProps", "contentContext", "onViewportChange", "prevScrollTopRef", "__html", "flex", "overflow", "onScroll", "scrolledBy", "cssMinHeight", "parseFloat", "cssHeight", "prevHeight", "nextHeight", "clampedNextHeight", "heightDiff", "justifyContent", "GROUP_NAME", "SelectGroupContextProvider", "useSelectGroupContext", "SelectGroup", "groupProps", "groupId", "LABEL_NAME", "SelectLabel", "labelProps", "groupContext", "id", "ITEM_NAME", "SelectItemContextProvider", "useSelectItemContext", "SelectItem", "textValue", "textValueProp", "itemProps", "isSelected", "setTextValue", "isFocused", "setIsFocused", "textId", "handleSelect", "prevTextValue", "textContent", "trim", "onFocus", "onBlur", "onPointerUp", "onPointerMove", "onItemLeave", "onPointerLeave", "ITEM_TEXT_NAME", "SelectItemText", "itemTextProps", "itemContext", "nativeOptionsContext", "itemTextNode", "setItemTextNode", "onItemTextChange", "nativeOption", "onNativeOptionRemove", "onNativeOptionAdd", "ITEM_INDICATOR_NAME", "SelectItemIndicator", "itemIndicatorProps", "SCROLL_UP_BUTTON_NAME", "SelectScrollUpButton", "canScrollUp", "setCanScrollUp", "onScrollButtonChange", "handleScroll", "SCROLL_DOWN_BUTTON_NAME", "SelectScrollDownButton", "canScrollDown", "setCanScrollDown", "maxScroll", "ceil", "SelectScrollButtonImpl", "scrollIndicatorProps", "autoScrollTimerRef", "clearAutoScrollTimer", "clearInterval", "activeItem", "flexShrink", "setInterval", "onAutoScroll", "SEPARATOR_NAME", "SelectSeparator", "separatorProps", "BubbleSelect", "selectProps", "prevValue", "usePrevious", "select", "selectProto", "HTMLSelectElement", "prototype", "descriptor", "Object", "getOwnPropertyDescriptor", "set", "Event", "bubbles", "call", "dispatchEvent", "displayName", "onSearchChange", "handleSearchChange", "useCallbackRef", "timerRef", "updateSearch", "clearTimeout", "isRepeated", "every", "char", "normalizedSearch", "currentItemIndex", "wrappedItems", "wrapArray", "excludeCurrentItem", "v", "toLowerCase", "startsWith", "array", "startIndex", "_", "index", "Root", "Trigger", "Value", "Icon", "Portal", "Content", "Viewport", "Group", "Label", "Item", "ItemText", "ItemIndicator", "ScrollUpButton", "ScrollDownButton", "Separator"]
}
